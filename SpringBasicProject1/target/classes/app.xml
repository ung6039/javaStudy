<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!--

		DI, AOP, JDBC, ORM => 컨테이너
			BeanFactory : CORE ( DI,DL(찾기))
					|
			ApplicationContext : DI,DL,AOP
					|
			==================
			|							|										|
WebApplicationContext	  AnnotationConfigApplicationContext	GenericXmlApplicationContext
		DI,DL,AOP,MVC			DI,DL,AOP,자바만 사용(XML(X))				DI,DL,AOP,자바+XML

컨테이너 : 메모리할당, 회수,DI,DL
DL?
-->
	<bean id="dao" class="com.sist.spring.EmpDAO" init-method="init">
		<property name="driverName" value="oracle.jdbc.driver.OracleDriver" ></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="username" value="hr"/>
		<property name="password" value="happy"/>
	</bean>
	<!-- 
		EmpDAO dao = new EmpDAO();
		dao.setDrvierName("oracle.jdbc.driver.OracleDriver); ==> DI
		
		=> ApplicationContext에 등록
		
		
		
		ApplicationContext -> XML
		=-========
		
		1.XML  파싱
		2. 클래스 메모리 할당
		3. setter에 값을 채운다
		4. 필요한 메소드 호출 가능 => init-method,destory-method
		================================ 기본 셋팅 ============
		5. 프로그래머가 필요한 메서드를 호출
		===================================
		6. 메모리 해제
		
		Map
		==================
		dao new EmpDAO()
		===================
		mc new MainClass()
		===================
		
	 -->
	 
	 <bean id="mc" class="com.sist.spring.MainClass"
	 	p:dao-ref="dao">	
	 </bean>
	 <bean id="mc2" class="com.sist.spring.MainClass2"
	 	p:dao-ref="dao">	
	 </bean> 
	
	 <!-- p:dao-ref ="dao" :: dao EmpDAO의 주소 값을 가지고 있음
	 	ref-> 객체 주소값이 전달
	 	dao => 글자 값만 전달
	  -->
	 
</beans>
